<?xml version="1.0" encoding="UTF-8"?>
<Flow xmlns="http://soap.sforce.com/2006/04/metadata">
    <actionCalls>
        <name>CallBigQuery</name>
        <label>Call Big Query</label>
        <locationX>367</locationX>
        <locationY>312</locationY>
        <actionName>BigQuery</actionName>
        <actionType>apex</actionType>
        <connector>
            <targetReference>displayResult</targetReference>
        </connector>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>mylist</name>
            <value>
                <elementReference>myvar</elementReference>
            </value>
        </inputParameters>
        <outputParameters>
            <assignToReference>github_files</assignToReference>
            <name>output</name>
        </outputParameters>
    </actionCalls>
    <apiVersion>49.0</apiVersion>
    <environments>Default</environments>
    <interviewLabel>testbq {!$Flow.CurrentDateTime}</interviewLabel>
    <label>Big Query Black Box</label>
    <processMetadataValues>
        <name>BuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>CanvasMode</name>
        <value>
            <stringValue>FREE_FORM_CANVAS</stringValue>
        </value>
    </processMetadataValues>
    <processType>Flow</processType>
    <recordLookups>
        <name>getBQ</name>
        <label>getBQ</label>
        <locationX>810</locationX>
        <locationY>391</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Completed</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Id</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>recordId</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>BigQuery__c</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordUpdates>
        <name>Update_Account</name>
        <label>Update BQ</label>
        <locationX>542</locationX>
        <locationY>392</locationY>
        <connector>
            <targetReference>getBQ</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Id</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>recordId</elementReference>
            </value>
        </filters>
        <inputAssignments>
            <field>Description__c</field>
            <value>
                <stringValue>count committed files in all GitHub repos</stringValue>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>QueryText__c</field>
            <value>
                <stringValue>select count(*) file_count from `bigquery-public-data.github_repos.files`</stringValue>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>Query_Result__c</field>
            <value>
                <elementReference>github_files</elementReference>
            </value>
        </inputAssignments>
        <object>BigQuery__c</object>
    </recordUpdates>
    <screens>
        <name>Completed</name>
        <label>Completed</label>
        <locationX>938</locationX>
        <locationY>392</locationY>
        <allowBack>true</allowBack>
        <allowFinish>true</allowFinish>
        <allowPause>true</allowPause>
        <fields>
            <name>completedDisplay</name>
            <fieldText>&lt;p&gt;A record of this BQ run has been written to  custom object BIGQuery__c.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;Description: &lt;strong style=&quot;color: rgb(0, 0, 255);&quot;&gt;{!getBQ.Description__c}&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;Query: &lt;strong style=&quot;color: rgb(0, 0, 255);&quot;&gt;{!getBQ.QueryText__c}&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;Result: &lt;strong style=&quot;color: rgb(0, 0, 255);&quot;&gt;{!getBQ.Query_Result__c}&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;Press Finish , Bye for now!&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <showFooter>true</showFooter>
        <showHeader>true</showHeader>
    </screens>
    <screens>
        <name>displayResult</name>
        <label>Display result</label>
        <locationX>369</locationX>
        <locationY>464</locationY>
        <allowBack>true</allowBack>
        <allowFinish>true</allowFinish>
        <allowPause>true</allowPause>
        <connector>
            <targetReference>Update_Account</targetReference>
        </connector>
        <fields>
            <name>ResultsStr</name>
            <fieldText>&lt;p&gt;BigQuery returned the following result:&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;Total Record Count  =&lt;strong style=&quot;color: rgb(0, 0, 255);&quot;&gt; &lt;/strong&gt;&lt;strong style=&quot;color: rgb(0, 0, 255); font-size: 16px;&quot;&gt;{!github_files}&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;That&apos;s a big number, right?&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;Let&apos;s update a Salesforce custom record with the result.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;Press Next&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <showFooter>true</showFooter>
        <showHeader>true</showHeader>
    </screens>
    <screens>
        <name>Scr1</name>
        <label>Scr1</label>
        <locationX>391</locationX>
        <locationY>47</locationY>
        <allowBack>true</allowBack>
        <allowFinish>true</allowFinish>
        <allowPause>true</allowPause>
        <connector>
            <targetReference>welcome</targetReference>
        </connector>
        <fields>
            <name>Welcome1</name>
            <fieldText>&lt;p&gt;Welcome to Flow.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;I want to demonstrate how a developer can extend Flow by building custom components.  &lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;Once the component is built it becomes a &quot;Black box&quot; to the business users, who simply orchestrate the component into their business process.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;Press Next to Continue&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <showFooter>true</showFooter>
        <showHeader>true</showHeader>
    </screens>
    <screens>
        <name>welcome</name>
        <label>Welcome to BigQuery</label>
        <locationX>462</locationX>
        <locationY>191</locationY>
        <allowBack>true</allowBack>
        <allowFinish>true</allowFinish>
        <allowPause>true</allowPause>
        <connector>
            <targetReference>CallBigQuery</targetReference>
        </connector>
        <fields>
            <name>displaytext</name>
            <fieldText>&lt;p&gt;This Flow contains a custom component that calls out to Google BiqQuery, executes a query, and then returns the result to the Flow.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;T&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;he details of actually how this is done** are abstracted from the users, who simply interact with the component on the Flow canvas, wiring up inputs and outputs as required.  &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);&quot;&gt;I chose this integration example quite deliberately because the queried dataset is &lt;/span&gt;&lt;strong style=&quot;color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);&quot;&gt;ENORMOUS&lt;/strong&gt;&lt;span style=&quot;color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);&quot;&gt; - in excess of 99GB, containing in excess of &lt;/span&gt;&lt;strong style=&quot;color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);&quot;&gt;2 Billion records&lt;/strong&gt;&lt;span style=&quot;color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);&quot;&gt;.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;While I know it&apos;s not a particularly useful query per se (see below), I&apos;m trying to illustrate the concept that a business user with no programming experience can wire up complex processes into a Flow using &apos;black box&apos; functionality.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;Press Next to execute the query.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;em style=&quot;font-family: courier; color: rgb(86, 86, 224); font-size: 14px;&quot;&gt;**We use an authenticated call to the BigQuery REST API, with the results returned as JSON. The actual SQL submitted to BigQuery  isï»¿:&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;strong style=&quot;color: rgb(137, 34, 240); font-size: 16px; background-color: rgb(255, 255, 255); font-family: courier;&quot;&gt;select count(*) file_count from `bigquery-public-data.github_repos.files`&lt;/strong&gt;&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <showFooter>true</showFooter>
        <showHeader>true</showHeader>
    </screens>
    <start>
        <locationX>50</locationX>
        <locationY>50</locationY>
        <connector>
            <targetReference>Scr1</targetReference>
        </connector>
    </start>
    <status>Active</status>
    <variables>
        <name>github_files</name>
        <dataType>Number</dataType>
        <isCollection>false</isCollection>
        <isInput>true</isInput>
        <isOutput>true</isOutput>
        <scale>0</scale>
    </variables>
    <variables>
        <name>myvar</name>
        <dataType>Number</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <scale>0</scale>
        <value>
            <numberValue>7.0</numberValue>
        </value>
    </variables>
    <variables>
        <name>recordId</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>true</isInput>
        <isOutput>true</isOutput>
        <value>
            <stringValue>a0r2w00000KI6c9AAD</stringValue>
        </value>
    </variables>
</Flow>
